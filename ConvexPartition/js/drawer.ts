import { Polygon, Point, Vertex } from "./polygon.js";

const POINT_SIZE = 2;
const BG_COLOR = 'white';
const MARGIN = 20;

export class PolygonDrawer{
    polygons: Polygon[];
    canvas: HTMLCanvasElement;
    ctx: CanvasRenderingContext2D;

    // Bounding box of polygon (in polygon coordinates)
    min_corner: Point;
    max_corner: Point;

    // Transforming values
    scale: number;
    min_canvas_dim: number;
    offset: Point;

    constructor(polygons: Polygon[], canvas: HTMLCanvasElement, ctx : CanvasRenderingContext2D){
        this.canvas = canvas;
        this.ctx = ctx;
        this.offset = new Point(0,0);
        
        this.set_polygons(polygons)
    }

    set_polygons(polygons: Polygon[]){
        this.polygons = this.sort_polygons(polygons);

        // Compute bounding box of polygons
        this.min_corner = new Point(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
        this.max_corner = new Point(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);
        for (var i = 0; i < this.polygons.length; i++){
            const polygon = this.polygons[i];
            for (var j = 0; j < polygon.boundary.length; j++){
                this.min_corner.x = Math.min(this.min_corner.x, polygon.boundary[j].x);
                this.min_corner.y = Math.min(this.min_corner.y, polygon.boundary[j].y);
                this.max_corner.x = Math.max(this.max_corner.x, polygon.boundary[j].x);
                this.max_corner.y = Math.max(this.max_corner.y, polygon.boundary[j].y);
            }
        }
    }

    /**
     * Sorts polygons left-to-right according to their centre of mass.
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#examples
     * @param polygons Polygons to sort.
     */
    sort_polygons(polygons: Polygon[]): Polygon[]{
        // Computes centres of mass for all polygons
        const coms = polygons.map((poly, i) => {
            return {i, com: poly.centre_of_mass()}
        });

        coms.sort((a, b) => {
            if (a.com.x > b.com.x) {
              return 1;
            }
            if (a.com.x < b.com.x) {
              return -1;
            }
            return 0;
        });

        return coms.map((v) => polygons[v.i]);
    }

    draw_polygons(){
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.ctx.fillStyle = BG_COLOR;
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

        // Update drawing related constants
        this.min_canvas_dim = Math.min(this.canvas.width, this.canvas.height);
        this.scale = (this.min_canvas_dim - MARGIN) / Math.max(this.max_corner.x - this.min_corner.x, this.max_corner.y - this.min_corner.y);
        this.offset.x = (this.canvas.width - this.min_canvas_dim)/2 + MARGIN/2;
        this.offset.y = (this.canvas.height - this.min_canvas_dim)/2 + MARGIN/2;

        // Draw polygons
        for (var i = 0; i < this.polygons.length; i++){
            const color = get_color(i / (Math.max(this.polygons.length - 1, 1)));
            this.draw_polygon(this.polygons[i], color);
        }
    }

    draw_polygon(polygon: Polygon, fill_color: string){
        // Point to re-use to transform from polygon-coords to canvas coords1
        var transformed_p = new Point(0,0); 

        // Draw background
        this.ctx.fillStyle = fill_color;
        this.ctx.beginPath();
        this.transform_coords(polygon.boundary[polygon.boundary.length-1], transformed_p);
        this.ctx.moveTo(transformed_p.x, transformed_p.y);
        for (var i = 0; i < polygon.boundary.length; i++){
            this.transform_coords(polygon.boundary[i], transformed_p);
            this.ctx.lineTo(transformed_p.x, transformed_p.y);
        }
        this.ctx.fill();

        // Draw holes
        this.ctx.fillStyle = 'white';
        for (var i = 0; i < polygon.holes.length; i++){
            const hole = polygon.holes[i];

            this.ctx.beginPath();
            this.transform_coords(hole[hole.length-1], transformed_p);
            this.ctx.moveTo(transformed_p.x, transformed_p.y);

            for (var j = 0; j < hole.length; j++){
                this.transform_coords(hole[j], transformed_p);
                this.ctx.lineTo(transformed_p.x, transformed_p.y);
            }
            this.ctx.fill();
        }

        // Draw points
        this.ctx.font = "12px serif";
        this.draw_points(polygon.boundary);
        for (const hole of polygon.holes)
            this.draw_points(hole);
    }

    draw_points(points: Point[], transformed_p = null){
        if (transformed_p == null)
            transformed_p = new Vertex(0,0);

        for (var i = 0; i < points.length; i++){
            const point = points[i];
            const center = this.transform_coords(point, transformed_p);

            this.ctx.fillStyle = 'gray';
            this.ctx.beginPath();
            this.ctx.arc(center.x, center.y, POINT_SIZE, 0, 2*Math.PI);
            this.ctx.fill();

            if (this.polygons.length < 5){
                this.ctx.fillStyle = 'black';
                this.ctx.fillText(`(${point.x}, ${point.y})`, center.x + 1, center.y + 1);
            }
        }
    }

    transform_coords(p: Point, out_loc:Point = null): Point{
        const x = (p.x - this.min_corner.x) * this.scale + this.offset.x;
        const y = (p.y - this.min_corner.y) * this.scale + this.offset.y;
        
        if (out_loc == null)
            out_loc = new Point(x,y)
        else{
            out_loc.x = x;
            out_loc.y = y;
        }

        return out_loc;
    }
}

// Colors taken from https://github.com/politiken-journalism/scale-color-perceptual
const INFERNO = [
    [0.001462, 0.000466, 0.013866], [0.002267, 0.001270, 0.018570], [0.003299, 0.002249, 0.024239],
           [0.004547, 0.003392, 0.030909], [0.006006, 0.004692, 0.038558], [0.007676, 0.006136, 0.046836],
           [0.009561, 0.007713, 0.055143], [0.011663, 0.009417, 0.063460], [0.013995, 0.011225, 0.071862],
           [0.016561, 0.013136, 0.080282], [0.019373, 0.015133, 0.088767], [0.022447, 0.017199, 0.097327],
           [0.025793, 0.019331, 0.105930], [0.029432, 0.021503, 0.114621], [0.033385, 0.023702, 0.123397],
           [0.037668, 0.025921, 0.132232], [0.042253, 0.028139, 0.141141], [0.046915, 0.030324, 0.150164],
           [0.051644, 0.032474, 0.159254], [0.056449, 0.034569, 0.168414], [0.061340, 0.036590, 0.177642],
           [0.066331, 0.038504, 0.186962], [0.071429, 0.040294, 0.196354], [0.076637, 0.041905, 0.205799],
           [0.081962, 0.043328, 0.215289], [0.087411, 0.044556, 0.224813], [0.092990, 0.045583, 0.234358],
           [0.098702, 0.046402, 0.243904], [0.104551, 0.047008, 0.253430], [0.110536, 0.047399, 0.262912],
           [0.116656, 0.047574, 0.272321], [0.122908, 0.047536, 0.281624], [0.129285, 0.047293, 0.290788],
           [0.135778, 0.046856, 0.299776], [0.142378, 0.046242, 0.308553], [0.149073, 0.045468, 0.317085],
           [0.155850, 0.044559, 0.325338], [0.162689, 0.043554, 0.333277], [0.169575, 0.042489, 0.340874],
           [0.176493, 0.041402, 0.348111], [0.183429, 0.040329, 0.354971], [0.190367, 0.039309, 0.361447],
           [0.197297, 0.038400, 0.367535], [0.204209, 0.037632, 0.373238], [0.211095, 0.037030, 0.378563],
           [0.217949, 0.036615, 0.383522], [0.224763, 0.036405, 0.388129], [0.231538, 0.036405, 0.392400],
           [0.238273, 0.036621, 0.396353], [0.244967, 0.037055, 0.400007], [0.251620, 0.037705, 0.403378],
           [0.258234, 0.038571, 0.406485], [0.264810, 0.039647, 0.409345], [0.271347, 0.040922, 0.411976],
           [0.277850, 0.042353, 0.414392], [0.284321, 0.043933, 0.416608], [0.290763, 0.045644, 0.418637],
           [0.297178, 0.047470, 0.420491], [0.303568, 0.049396, 0.422182], [0.309935, 0.051407, 0.423721],
           [0.316282, 0.053490, 0.425116], [0.322610, 0.055634, 0.426377], [0.328921, 0.057827, 0.427511],
           [0.335217, 0.060060, 0.428524], [0.341500, 0.062325, 0.429425], [0.347771, 0.064616, 0.430217],
           [0.354032, 0.066925, 0.430906], [0.360284, 0.069247, 0.431497], [0.366529, 0.071579, 0.431994],
           [0.372768, 0.073915, 0.432400], [0.379001, 0.076253, 0.432719], [0.385228, 0.078591, 0.432955],
           [0.391453, 0.080927, 0.433109], [0.397674, 0.083257, 0.433183], [0.403894, 0.085580, 0.433179],
           [0.410113, 0.087896, 0.433098], [0.416331, 0.090203, 0.432943], [0.422549, 0.092501, 0.432714],
           [0.428768, 0.094790, 0.432412], [0.434987, 0.097069, 0.432039], [0.441207, 0.099338, 0.431594],
           [0.447428, 0.101597, 0.431080], [0.453651, 0.103848, 0.430498], [0.459875, 0.106089, 0.429846],
           [0.466100, 0.108322, 0.429125], [0.472328, 0.110547, 0.428334], [0.478558, 0.112764, 0.427475],
           [0.484789, 0.114974, 0.426548], [0.491022, 0.117179, 0.425552], [0.497257, 0.119379, 0.424488],
           [0.503493, 0.121575, 0.423356], [0.509730, 0.123769, 0.422156], [0.515967, 0.125960, 0.420887],
           [0.522206, 0.128150, 0.419549], [0.528444, 0.130341, 0.418142], [0.534683, 0.132534, 0.416667],
           [0.540920, 0.134729, 0.415123], [0.547157, 0.136929, 0.413511], [0.553392, 0.139134, 0.411829],
           [0.559624, 0.141346, 0.410078], [0.565854, 0.143567, 0.408258], [0.572081, 0.145797, 0.406369],
           [0.578304, 0.148039, 0.404411], [0.584521, 0.150294, 0.402385], [0.590734, 0.152563, 0.400290],
           [0.596940, 0.154848, 0.398125], [0.603139, 0.157151, 0.395891], [0.609330, 0.159474, 0.393589],
           [0.615513, 0.161817, 0.391219], [0.621685, 0.164184, 0.388781], [0.627847, 0.166575, 0.386276],
           [0.633998, 0.168992, 0.383704], [0.640135, 0.171438, 0.381065], [0.646260, 0.173914, 0.378359],
           [0.652369, 0.176421, 0.375586], [0.658463, 0.178962, 0.372748], [0.664540, 0.181539, 0.369846],
           [0.670599, 0.184153, 0.366879], [0.676638, 0.186807, 0.363849], [0.682656, 0.189501, 0.360757],
           [0.688653, 0.192239, 0.357603], [0.694627, 0.195021, 0.354388], [0.700576, 0.197851, 0.351113],
           [0.706500, 0.200728, 0.347777], [0.712396, 0.203656, 0.344383], [0.718264, 0.206636, 0.340931],
           [0.724103, 0.209670, 0.337424], [0.729909, 0.212759, 0.333861], [0.735683, 0.215906, 0.330245],
           [0.741423, 0.219112, 0.326576], [0.747127, 0.222378, 0.322856], [0.752794, 0.225706, 0.319085],
           [0.758422, 0.229097, 0.315266], [0.764010, 0.232554, 0.311399], [0.769556, 0.236077, 0.307485],
           [0.775059, 0.239667, 0.303526], [0.780517, 0.243327, 0.299523], [0.785929, 0.247056, 0.295477],
           [0.791293, 0.250856, 0.291390], [0.796607, 0.254728, 0.287264], [0.801871, 0.258674, 0.283099],
           [0.807082, 0.262692, 0.278898], [0.812239, 0.266786, 0.274661], [0.817341, 0.270954, 0.270390],
           [0.822386, 0.275197, 0.266085], [0.827372, 0.279517, 0.261750], [0.832299, 0.283913, 0.257383],
           [0.837165, 0.288385, 0.252988], [0.841969, 0.292933, 0.248564], [0.846709, 0.297559, 0.244113],
           [0.851384, 0.302260, 0.239636], [0.855992, 0.307038, 0.235133], [0.860533, 0.311892, 0.230606],
           [0.865006, 0.316822, 0.226055], [0.869409, 0.321827, 0.221482], [0.873741, 0.326906, 0.216886],
           [0.878001, 0.332060, 0.212268], [0.882188, 0.337287, 0.207628], [0.886302, 0.342586, 0.202968],
           [0.890341, 0.347957, 0.198286], [0.894305, 0.353399, 0.193584], [0.898192, 0.358911, 0.188860],
           [0.902003, 0.364492, 0.184116], [0.905735, 0.370140, 0.179350], [0.909390, 0.375856, 0.174563],
           [0.912966, 0.381636, 0.169755], [0.916462, 0.387481, 0.164924], [0.919879, 0.393389, 0.160070],
           [0.923215, 0.399359, 0.155193], [0.926470, 0.405389, 0.150292], [0.929644, 0.411479, 0.145367],
           [0.932737, 0.417627, 0.140417], [0.935747, 0.423831, 0.135440], [0.938675, 0.430091, 0.130438],
           [0.941521, 0.436405, 0.125409], [0.944285, 0.442772, 0.120354], [0.946965, 0.449191, 0.115272],
           [0.949562, 0.455660, 0.110164], [0.952075, 0.462178, 0.105031], [0.954506, 0.468744, 0.099874],
           [0.956852, 0.475356, 0.094695], [0.959114, 0.482014, 0.089499], [0.961293, 0.488716, 0.084289],
           [0.963387, 0.495462, 0.079073], [0.965397, 0.502249, 0.073859], [0.967322, 0.509078, 0.068659],
           [0.969163, 0.515946, 0.063488], [0.970919, 0.522853, 0.058367], [0.972590, 0.529798, 0.053324],
           [0.974176, 0.536780, 0.048392], [0.975677, 0.543798, 0.043618], [0.977092, 0.550850, 0.039050],
           [0.978422, 0.557937, 0.034931], [0.979666, 0.565057, 0.031409], [0.980824, 0.572209, 0.028508],
           [0.981895, 0.579392, 0.026250], [0.982881, 0.586606, 0.024661], [0.983779, 0.593849, 0.023770],
           [0.984591, 0.601122, 0.023606], [0.985315, 0.608422, 0.024202], [0.985952, 0.615750, 0.025592],
           [0.986502, 0.623105, 0.027814], [0.986964, 0.630485, 0.030908], [0.987337, 0.637890, 0.034916],
           [0.987622, 0.645320, 0.039886], [0.987819, 0.652773, 0.045581], [0.987926, 0.660250, 0.051750],
           [0.987945, 0.667748, 0.058329], [0.987874, 0.675267, 0.065257], [0.987714, 0.682807, 0.072489],
           [0.987464, 0.690366, 0.079990], [0.987124, 0.697944, 0.087731], [0.986694, 0.705540, 0.095694],
           [0.986175, 0.713153, 0.103863], [0.985566, 0.720782, 0.112229], [0.984865, 0.728427, 0.120785],
           [0.984075, 0.736087, 0.129527], [0.983196, 0.743758, 0.138453], [0.982228, 0.751442, 0.147565],
           [0.981173, 0.759135, 0.156863], [0.980032, 0.766837, 0.166353], [0.978806, 0.774545, 0.176037],
           [0.977497, 0.782258, 0.185923], [0.976108, 0.789974, 0.196018], [0.974638, 0.797692, 0.206332],
           [0.973088, 0.805409, 0.216877], [0.971468, 0.813122, 0.227658], [0.969783, 0.820825, 0.238686],
           [0.968041, 0.828515, 0.249972], [0.966243, 0.836191, 0.261534], [0.964394, 0.843848, 0.273391],
           [0.962517, 0.851476, 0.285546], [0.960626, 0.859069, 0.298010], [0.958720, 0.866624, 0.310820],
           [0.956834, 0.874129, 0.323974], [0.954997, 0.881569, 0.337475], [0.953215, 0.888942, 0.351369],
           [0.951546, 0.896226, 0.365627], [0.950018, 0.903409, 0.380271], [0.948683, 0.910473, 0.395289],
           [0.947594, 0.917399, 0.410665], [0.946809, 0.924168, 0.426373], [0.946392, 0.930761, 0.442367],
           [0.946403, 0.937159, 0.458592], [0.946903, 0.943348, 0.474970], [0.947937, 0.949318, 0.491426],
           [0.949545, 0.955063, 0.507860], [0.951740, 0.960587, 0.524203], [0.954529, 0.965896, 0.540361],
           [0.957896, 0.971003, 0.556275], [0.961812, 0.975924, 0.571925], [0.966249, 0.980678, 0.587206],
           [0.971162, 0.985282, 0.602154], [0.976511, 0.989753, 0.616760], [0.982257, 0.994109, 0.631017],
           [0.988362, 0.998364, 0.644924]
]

// Colors taken from https://github.com/tsipkens/cmap/blob/master/plasma.m
const PLASMA = [
	[0.050383000,	0.029803000,	0.527975000],
	[0.063536000,	0.028426000,	0.533124000],
	[0.075353000,	0.027206000,	0.538007000],
	[0.086222000,	0.026125000,	0.542658000],
	[0.096379000,	0.025165000,	0.547103000],
	[0.105980000,	0.024309000,	0.551368000],
	[0.115124000,	0.023556000,	0.555468000],
	[0.123903000,	0.022878000,	0.559423000],
	[0.132381000,	0.022258000,	0.563250000],
	[0.140603000,	0.021687000,	0.566959000],
	[0.148607000,	0.021154000,	0.570562000],
	[0.156421000,	0.020651000,	0.574065000],
	[0.164070000,	0.020171000,	0.577478000],
	[0.171574000,	0.019706000,	0.580806000],
	[0.178950000,	0.019252000,	0.584054000],
	[0.186213000,	0.018803000,	0.587228000],
	[0.193374000,	0.018354000,	0.590330000],
	[0.200445000,	0.017902000,	0.593364000],
	[0.207435000,	0.017442000,	0.596333000],
	[0.214350000,	0.016973000,	0.599239000],
	[0.221197000,	0.016497000,	0.602083000],
	[0.227983000,	0.016007000,	0.604867000],
	[0.234715000,	0.015502000,	0.607592000],
	[0.241396000,	0.014979000,	0.610259000],
	[0.248032000,	0.014439000,	0.612868000],
	[0.254627000,	0.013882000,	0.615419000],
	[0.261183000,	0.013308000,	0.617911000],
	[0.267703000,	0.012716000,	0.620346000],
	[0.274191000,	0.012109000,	0.622722000],
	[0.280648000,	0.011488000,	0.625038000],
	[0.287076000,	0.010855000,	0.627295000],
	[0.293478000,	0.010213000,	0.629490000],
	[0.299855000,	0.009561000,	0.631624000],
	[0.306210000,	0.008902000,	0.633694000],
	[0.312543000,	0.008239000,	0.635700000],
	[0.318856000,	0.007576000,	0.637640000],
	[0.325150000,	0.006915000,	0.639512000],
	[0.331426000,	0.006261000,	0.641316000],
	[0.337683000,	0.005618000,	0.643049000],
	[0.343925000,	0.004991000,	0.644710000],
	[0.350150000,	0.004382000,	0.646298000],
	[0.356359000,	0.003798000,	0.647810000],
	[0.362553000,	0.003243000,	0.649245000],
	[0.368733000,	0.002724000,	0.650601000],
	[0.374897000,	0.002245000,	0.651876000],
	[0.381047000,	0.001814000,	0.653068000],
	[0.387183000,	0.001434000,	0.654177000],
	[0.393304000,	0.001114000,	0.655199000],
	[0.399411000,	0.000859000,	0.656133000],
	[0.405503000,	0.000678000,	0.656977000],
	[0.411580000,	0.000577000,	0.657730000],
	[0.417642000,	0.000564000,	0.658390000],
	[0.423689000,	0.000646000,	0.658956000],
	[0.429719000,	0.000831000,	0.659425000],
	[0.435734000,	0.001127000,	0.659797000],
	[0.441732000,	0.001540000,	0.660069000],
	[0.447714000,	0.002080000,	0.660240000],
	[0.453677000,	0.002755000,	0.660310000],
	[0.459623000,	0.003574000,	0.660277000],
	[0.465550000,	0.004545000,	0.660139000],
	[0.471457000,	0.005678000,	0.659897000],
	[0.477344000,	0.006980000,	0.659549000],
	[0.483210000,	0.008460000,	0.659095000],
	[0.489055000,	0.010127000,	0.658534000],
	[0.494877000,	0.011990000,	0.657865000],
	[0.500678000,	0.014055000,	0.657088000],
	[0.506454000,	0.016333000,	0.656202000],
	[0.512206000,	0.018833000,	0.655209000],
	[0.517933000,	0.021563000,	0.654109000],
	[0.523633000,	0.024532000,	0.652901000],
	[0.529306000,	0.027747000,	0.651586000],
	[0.534952000,	0.031217000,	0.650165000],
	[0.540570000,	0.034950000,	0.648640000],
	[0.546157000,	0.038954000,	0.647010000],
	[0.551715000,	0.043136000,	0.645277000],
	[0.557243000,	0.047331000,	0.643443000],
	[0.562738000,	0.051545000,	0.641509000],
	[0.568201000,	0.055778000,	0.639477000],
	[0.573632000,	0.060028000,	0.637349000],
	[0.579029000,	0.064296000,	0.635126000],
	[0.584391000,	0.068579000,	0.632812000],
	[0.589719000,	0.072878000,	0.630408000],
	[0.595011000,	0.077190000,	0.627917000],
	[0.600266000,	0.081516000,	0.625342000],
	[0.605485000,	0.085854000,	0.622686000],
	[0.610667000,	0.090204000,	0.619951000],
	[0.615812000,	0.094564000,	0.617140000],
	[0.620919000,	0.098934000,	0.614257000],
	[0.625987000,	0.103312000,	0.611305000],
	[0.631017000,	0.107699000,	0.608287000],
	[0.636008000,	0.112092000,	0.605205000],
	[0.640959000,	0.116492000,	0.602065000],
	[0.645872000,	0.120898000,	0.598867000],
	[0.650746000,	0.125309000,	0.595617000],
	[0.655580000,	0.129725000,	0.592317000],
	[0.660374000,	0.134144000,	0.588971000],
	[0.665129000,	0.138566000,	0.585582000],
	[0.669845000,	0.142992000,	0.582154000],
	[0.674522000,	0.147419000,	0.578688000],
	[0.679160000,	0.151848000,	0.575189000],
	[0.683758000,	0.156278000,	0.571660000],
	[0.688318000,	0.160709000,	0.568103000],
	[0.692840000,	0.165141000,	0.564522000],
	[0.697324000,	0.169573000,	0.560919000],
	[0.701769000,	0.174005000,	0.557296000],
	[0.706178000,	0.178437000,	0.553657000],
	[0.710549000,	0.182868000,	0.550004000],
	[0.714883000,	0.187299000,	0.546338000],
	[0.719181000,	0.191729000,	0.542663000],
	[0.723444000,	0.196158000,	0.538981000],
	[0.727670000,	0.200586000,	0.535293000],
	[0.731862000,	0.205013000,	0.531601000],
	[0.736019000,	0.209439000,	0.527908000],
	[0.740143000,	0.213864000,	0.524216000],
	[0.744232000,	0.218288000,	0.520524000],
	[0.748289000,	0.222711000,	0.516834000],
	[0.752312000,	0.227133000,	0.513149000],
	[0.756304000,	0.231555000,	0.509468000],
	[0.760264000,	0.235976000,	0.505794000],
	[0.764193000,	0.240396000,	0.502126000],
	[0.768090000,	0.244817000,	0.498465000],
	[0.771958000,	0.249237000,	0.494813000],
	[0.775796000,	0.253658000,	0.491171000],
	[0.779604000,	0.258078000,	0.487539000],
	[0.783383000,	0.262500000,	0.483918000],
	[0.787133000,	0.266922000,	0.480307000],
	[0.790855000,	0.271345000,	0.476706000],
	[0.794549000,	0.275770000,	0.473117000],
	[0.798216000,	0.280197000,	0.469538000],
	[0.801855000,	0.284626000,	0.465971000],
	[0.805467000,	0.289057000,	0.462415000],
	[0.809052000,	0.293491000,	0.458870000],
	[0.812612000,	0.297928000,	0.455338000],
	[0.816144000,	0.302368000,	0.451816000],
	[0.819651000,	0.306812000,	0.448306000],
	[0.823132000,	0.311261000,	0.444806000],
	[0.826588000,	0.315714000,	0.441316000],
	[0.830018000,	0.320172000,	0.437836000],
	[0.833422000,	0.324635000,	0.434366000],
	[0.836801000,	0.329105000,	0.430905000],
	[0.840155000,	0.333580000,	0.427455000],
	[0.843484000,	0.338062000,	0.424013000],
	[0.846788000,	0.342551000,	0.420579000],
	[0.850066000,	0.347048000,	0.417153000],
	[0.853319000,	0.351553000,	0.413734000],
	[0.856547000,	0.356066000,	0.410322000],
	[0.859750000,	0.360588000,	0.406917000],
	[0.862927000,	0.365119000,	0.403519000],
	[0.866078000,	0.369660000,	0.400126000],
	[0.869203000,	0.374212000,	0.396738000],
	[0.872303000,	0.378774000,	0.393355000],
	[0.875376000,	0.383347000,	0.389976000],
	[0.878423000,	0.387932000,	0.386600000],
	[0.881443000,	0.392529000,	0.383229000],
	[0.884436000,	0.397139000,	0.379860000],
	[0.887402000,	0.401762000,	0.376494000],
	[0.890340000,	0.406398000,	0.373130000],
	[0.893250000,	0.411048000,	0.369768000],
	[0.896131000,	0.415712000,	0.366407000],
	[0.898984000,	0.420392000,	0.363047000],
	[0.901807000,	0.425087000,	0.359688000],
	[0.904601000,	0.429797000,	0.356329000],
	[0.907365000,	0.434524000,	0.352970000],
	[0.910098000,	0.439268000,	0.349610000],
	[0.912800000,	0.444029000,	0.346251000],
	[0.915471000,	0.448807000,	0.342890000],
	[0.918109000,	0.453603000,	0.339529000],
	[0.920714000,	0.458417000,	0.336166000],
	[0.923287000,	0.463251000,	0.332801000],
	[0.925825000,	0.468103000,	0.329435000],
	[0.928329000,	0.472975000,	0.326067000],
	[0.930798000,	0.477867000,	0.322697000],
	[0.933232000,	0.482780000,	0.319325000],
	[0.935630000,	0.487712000,	0.315952000],
	[0.937990000,	0.492667000,	0.312575000],
	[0.940313000,	0.497642000,	0.309197000],
	[0.942598000,	0.502639000,	0.305816000],
	[0.944844000,	0.507658000,	0.302433000],
	[0.947051000,	0.512699000,	0.299049000],
	[0.949217000,	0.517763000,	0.295662000],
	[0.951344000,	0.522850000,	0.292275000],
	[0.953428000,	0.527960000,	0.288883000],
	[0.955470000,	0.533093000,	0.285490000],
	[0.957469000,	0.538250000,	0.282096000],
	[0.959424000,	0.543431000,	0.278701000],
	[0.961336000,	0.548636000,	0.275305000],
	[0.963203000,	0.553865000,	0.271909000],
	[0.965024000,	0.559118000,	0.268513000],
	[0.966798000,	0.564396000,	0.265118000],
	[0.968526000,	0.569700000,	0.261721000],
	[0.970205000,	0.575028000,	0.258325000],
	[0.971835000,	0.580382000,	0.254931000],
	[0.973416000,	0.585761000,	0.251540000],
	[0.974947000,	0.591165000,	0.248151000],
	[0.976428000,	0.596595000,	0.244767000],
	[0.977856000,	0.602051000,	0.241387000],
	[0.979233000,	0.607532000,	0.238013000],
	[0.980556000,	0.613039000,	0.234646000],
	[0.981826000,	0.618572000,	0.231287000],
	[0.983041000,	0.624131000,	0.227937000],
	[0.984199000,	0.629718000,	0.224595000],
	[0.985301000,	0.635330000,	0.221265000],
	[0.986345000,	0.640969000,	0.217948000],
	[0.987332000,	0.646633000,	0.214648000],
	[0.988260000,	0.652325000,	0.211364000],
	[0.989128000,	0.658043000,	0.208100000],
	[0.989935000,	0.663787000,	0.204859000],
	[0.990681000,	0.669558000,	0.201642000],
	[0.991365000,	0.675355000,	0.198453000],
	[0.991985000,	0.681179000,	0.195295000],
	[0.992541000,	0.687030000,	0.192171000],
	[0.993032000,	0.692907000,	0.189084000],
	[0.993456000,	0.698810000,	0.186041000],
	[0.993814000,	0.704741000,	0.183043000],
	[0.994103000,	0.710698000,	0.180097000],
	[0.994324000,	0.716681000,	0.177208000],
	[0.994474000,	0.722691000,	0.174381000],
	[0.994553000,	0.728728000,	0.171622000],
	[0.994561000,	0.734791000,	0.168938000],
	[0.994495000,	0.740880000,	0.166335000],
	[0.994355000,	0.746995000,	0.163821000],
	[0.994141000,	0.753137000,	0.161404000],
	[0.993851000,	0.759304000,	0.159092000],
	[0.993482000,	0.765499000,	0.156891000],
	[0.993033000,	0.771720000,	0.154808000],
	[0.992505000,	0.777967000,	0.152855000],
	[0.991897000,	0.784239000,	0.151042000],
	[0.991209000,	0.790537000,	0.149377000],
	[0.990439000,	0.796859000,	0.147870000],
	[0.989587000,	0.803205000,	0.146529000],
	[0.988648000,	0.809579000,	0.145357000],
	[0.987621000,	0.815978000,	0.144363000],
	[0.986509000,	0.822401000,	0.143557000],
	[0.985314000,	0.828846000,	0.142945000],
	[0.984031000,	0.835315000,	0.142528000],
	[0.982653000,	0.841812000,	0.142303000],
	[0.981190000,	0.848329000,	0.142279000],
	[0.979644000,	0.854866000,	0.142453000],
	[0.977995000,	0.861432000,	0.142808000],
	[0.976265000,	0.868016000,	0.143351000],
	[0.974443000,	0.874622000,	0.144061000],
	[0.972530000,	0.881250000,	0.144923000],
	[0.970533000,	0.887896000,	0.145919000],
	[0.968443000,	0.894564000,	0.147014000],
	[0.966271000,	0.901249000,	0.148180000],
	[0.964021000,	0.907950000,	0.149370000],
	[0.961681000,	0.914672000,	0.150520000],
	[0.959276000,	0.921407000,	0.151566000],
	[0.956808000,	0.928152000,	0.152409000],
	[0.954287000,	0.934908000,	0.152921000],
	[0.951726000,	0.941671000,	0.152925000],
	[0.949151000,	0.948435000,	0.152178000],
	[0.946602000,	0.955190000,	0.150328000],
	[0.944152000,	0.961916000,	0.146861000],
	[0.941896000,	0.968590000,	0.140956000],
	[0.940015000,	0.975158000,	0.131326000]
]

// Returns a color based on the colormap, for 0 <= x <= 1
function get_color(x:number):string{
    x = Math.min(Math.max(x, 0),1) // Clamp to 0<=x<=1

    const n_colors = INFERNO.length - 1;

    // Blend between two closest colors in the colormap
    const min_index = Math.floor(x * n_colors);
    const min_color = PLASMA[min_index];

    const max_index = Math.ceil(x * n_colors)
    const max_color = PLASMA[max_index];

    const color = [0,0,0]; 
    for (var i = 0; i < 3; i++){
        const t = 1 - (x * n_colors - min_index); 

        color[i] = min_color[i] * t + max_color[i] * (1-t);
    }

    return `rgba(${255*color[0]}, ${255*color[1]}, ${255*color[2]}, 0.9)`;
}